name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  IMAGE_NAME: wg-obfuscator
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/386,linux/ppc64le,linux/s390x

jobs:

  build-docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/386, linux/ppc64le, linux/s390x]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare filename and tag
        id: prep
        run: |
          SAFE_PLATFORM="${{ matrix.platform }}"
          SAFE_PLATFORM=$(echo "$SAFE_PLATFORM" | sed 's|linux/||;s|/|-|g')
          echo "safe_platform=$SAFE_PLATFORM" >> $GITHUB_OUTPUT

      - name: Build per-arch image and export as tar
        uses: docker/build-push-action@v5
        with:
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_NAME }}-${{ steps.prep.outputs.safe_platform }}
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=${{ env.IMAGE_NAME }}-docker-${{ steps.prep.outputs.safe_platform }}.tar
          context: .

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-docker-${{ steps.prep.outputs.safe_platform }}.tar
          path: ${{ env.IMAGE_NAME }}-docker-${{ steps.prep.outputs.safe_platform }}.tar


  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build:
          #  name       compiler                  static
          - [x64,       gcc,                      ""]
          - [arm,       arm-linux-gnueabihf-gcc,  ""]
          - [arm64,     aarch64-linux-gnu-gcc,    ""]
          - [mipsel,    mipsel-linux-gnu-gcc,     ""]
          - [x64-static,gcc,                      "-static"]
          - [arm-static,arm-linux-gnueabihf-gcc,  "-static"]
          - [arm64-static,aarch64-linux-gnu-gcc,  "-static"]
          - [mipsel-static,mipsel-linux-gnu-gcc,  "-static"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu gcc-mipsel-linux-gnu

      - name: Clean and build ${{ matrix.build[0] }}
        run: |
          make clean
          make all CC=${{ matrix.build[1] }} LDFLAGS='${{ matrix.build[2] }}'

      - name: Prepare files
        run: |
          mkdir -p output
          cp LICENSE *.md ${{ env.IMAGE_NAME }} *.conf output/
    
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-linux-${{ matrix.build[0] }}.zip
          path: output/


  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: make clean all
        run: make clean all

      - name: Prepare files
        run: |
          mkdir -p output
          cp LICENSE *.md ${{ env.IMAGE_NAME }} *.conf output/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-macos.zip
          path: output/


  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            gcc
            git
            zip

      - name: Checkout
        uses: actions/checkout@v4

      - name: make clean all
        run: make clean all

      - name: Prepare files
        run: |
          mkdir -p output
          cp LICENSE *.md *.dll *.exe *.conf output/
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-windows-x64.zip
          path: output/
